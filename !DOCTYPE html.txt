<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventario y Pedidos de Traslado</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 24px;
            border-radius: 12px;
            text-align: center;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .summary-table td, .summary-table th {
            padding: 8px;
            border: 1px solid #e5e7eb;
            text-align: center;
        }
    </style>
</head>
<body class="bg-gray-100 p-4">

    <div class="max-w-4xl mx-auto bg-white shadow-lg rounded-xl overflow-hidden md:p-8 p-4">
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">Inventario y Traslado</h1>
            <p class="text-gray-500 mt-2">Registra y gestiona tus traslados de inventario de forma sencilla.</p>
        </div>

        <!-- Botones de navegación -->
        <div class="flex justify-center mb-6 space-x-4">
            <button onclick="showForm()" class="px-6 py-2 text-sm font-semibold rounded-full focus:outline-none transition-colors duration-200" id="form-tab">
                Nuevo Pedido
            </button>
            <button onclick="showStock()" class="px-6 py-2 text-sm font-semibold rounded-full focus:outline-none transition-colors duration-200" id="stock-tab">
                Stock
            </button>
            <button onclick="showIncomings()" class="px-6 py-2 text-sm font-semibold rounded-full focus:outline-none transition-colors duration-200" id="incomings-tab">
                Entradas
            </button>
            <button onclick="showHistory()" class="px-6 py-2 text-sm font-semibold rounded-full focus:outline-none transition-colors duration-200" id="history-tab">
                Ver Historial
            </button>
        </div>
        
        <!-- Contenedor del formulario de nuevo pedido -->
        <div id="form-container" class="space-y-6">
            <h2 class="text-2xl font-bold text-gray-800">Salida de Inventario</h2>
            <div class="grid md:grid-cols-2 grid-cols-1 gap-6 mb-6">
                <!-- Fecha del Pedido (automática) -->
                <div>
                    <label for="fechaPedido" class="block text-sm font-medium text-gray-700">Fecha del Pedido</label>
                    <input type="date" id="fechaPedido" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 bg-gray-50 border">
                </div>
                <!-- Fecha de Entrega (manual) -->
                <div>
                    <label for="fechaEntrega" class="block text-sm font-medium text-gray-700">Fecha de Entrega Deseada</label>
                    <input type="date" id="fechaEntrega" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 bg-gray-50 border">
                </div>
                <!-- Sección de Comentarios -->
                <div class="md:col-span-2">
                    <label for="comentarios" class="block text-sm font-medium text-gray-700">Comentarios</label>
                    <textarea id="comentarios" rows="3" placeholder="Añade notas o instrucciones especiales aquí..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 bg-gray-50 border"></textarea>
                </div>
            </div>

            <!-- Detalles del Inventario -->
            <div id="items-container" class="space-y-4 mb-6">
                <h3 class="text-lg font-semibold text-gray-800">Artículos del Pedido</h3>
                <!-- Datalist para autocompletar los productos -->
                <datalist id="products">
                    <!-- Options will be populated by JS -->
                </datalist>

                <div class="item-entry grid md:grid-cols-4 grid-cols-1 gap-4 items-center p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <div>
                        <label for="item-0" class="block text-xs font-medium text-gray-500">Descripción del Artículo</label>
                        <input type="text" id="item-0" list="products" oninput="updateSku(this)" placeholder="Escribe para buscar..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border">
                    </div>
                    <div>
                        <label for="sku-0" class="block text-xs font-medium text-gray-500">SKU / Código</label>
                        <input type="text" id="sku-0" placeholder="Código" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border" readonly>
                    </div>
                    <div>
                        <label for="cantidad-0" class="block text-xs font-medium text-gray-500">Cantidad</label>
                        <input type="number" id="cantidad-0" value="1" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border">
                    </div>
                    <div class="flex justify-end">
                        <button onclick="removeItem(this)" class="px-4 py-2 text-sm font-medium text-white bg-red-500 rounded-md hover:bg-red-600 focus:ring-4 focus:ring-red-300 transition-all duration-200">
                            Eliminar
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="flex justify-between items-center mb-6">
                <button onclick="addItem()" class="px-4 py-2 text-sm font-medium text-indigo-700 bg-indigo-100 rounded-md hover:bg-indigo-200 focus:ring-4 focus:ring-indigo-300 transition-all duration-200">
                    + Añadir Artículo
                </button>
            </div>

            <!-- Botón de Envío -->
            <div class="text-center">
                <button onclick="confirmAndRegisterMovement()" class="w-full md:w-auto px-8 py-3 bg-indigo-600 text-white font-semibold rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-4 focus:ring-indigo-500 transition-all duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-2 -mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8m-9 13v-8a2 2 0 012-2h4a2 2 0 012 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2z" />
                    </svg>
                    Enviar Pedido
                </button>
            </div>
        </div>

        <!-- Contenedor para ver el stock -->
        <div id="stock-container" class="hidden text-center">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Stock Actual por Material</h2>
            <button onclick="showInitialStockModal()" class="mb-4 px-4 py-2 text-sm font-medium text-blue-700 bg-blue-100 rounded-md hover:bg-blue-200 focus:ring-4 focus:ring-blue-300 transition-all duration-200">
                Establecer Stock Inicial
            </button>
            <div class="bg-indigo-100 rounded-xl shadow-inner p-4">
                <div id="stock-table-container">
                    <!-- Stock data will be rendered here -->
                </div>
            </div>
        </div>

        <!-- Contenedor para registrar entradas -->
        <div id="incomings-container" class="hidden space-y-6">
            <h2 class="text-2xl font-bold text-gray-800">Registrar Entrada de Material</h2>
            <!-- Nuevo campo de fecha para entradas -->
            <div>
                <label for="incomingDate" class="block text-sm font-medium text-gray-700">Fecha de Entrada</label>
                <input type="date" id="incomingDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 bg-gray-50 border">
            </div>
            <div>
                <label for="incomingPallets" class="block text-sm font-medium text-gray-700">Cantidad de Pallets que entraron</label>
                <input type="number" id="incomingPallets" value="1" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 bg-gray-50 border">
            </div>
            <!-- Nuevo campo para el material con autocompletado -->
            <div class="mt-4">
                <label for="incomingItem" class="block text-sm font-medium text-gray-700">Descripción del Artículo</label>
                <input type="text" id="incomingItem" list="products" oninput="updateIncomingSku()" placeholder="Escribe para buscar..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border">
            </div>
            <!-- Nuevo campo para el SKU (automático) -->
            <div class="mt-4">
                <label for="incomingSku" class="block text-sm font-medium text-gray-700">SKU / Código</label>
                <input type="text" id="incomingSku" placeholder="Código" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border" readonly>
            </div>
            <div class="text-center mt-6">
                <button onclick="confirmAndRegisterIncoming()" class="w-full md:w-auto px-8 py-3 bg-green-600 text-white font-semibold rounded-full shadow-lg hover:bg-green-700 focus:outline-none focus:ring-4 focus:ring-green-500 transition-all duration-300">
                    Registrar Entrada
                </button>
            </div>
        </div>
        
        <!-- Historial de movimientos -->
        <div id="history-container" class="hidden">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Historial de Movimientos</h2>
            <div class="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4 mb-6">
                <input type="date" id="summary-start-date" class="rounded-md border-gray-300 shadow-sm p-2.5 border bg-white" title="Fecha de Inicio">
                <input type="date" id="summary-end-date" class="rounded-md border-gray-300 shadow-sm p-2.5 border bg-white" title="Fecha de Fin">
                <button onclick="showDailySummary()" class="px-6 py-2 text-sm font-semibold rounded-full text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200">
                    Resumen Diario
                </button>
            </div>
            <div id="monthly-summary-container" class="mb-6 hidden">
                <!-- Monthly summary will be displayed here -->
            </div>
            <div id="history-list" class="space-y-4">
                <!-- Historial cargado dinámicamente desde LocalStorage -->
            </div>
            <div class="mt-6 text-center">
                <button onclick="clearHistory()" class="px-4 py-2 text-sm font-medium text-red-700 bg-red-100 rounded-md hover:bg-red-200 focus:ring-4 focus:ring-red-300 transition-all duration-200">
                    Borrar Historial
                </button>
            </div>
        </div>

        <!-- Mensaje de confirmación o error -->
        <div id="message-box" class="mt-6 hidden p-4 text-center text-sm font-medium rounded-md"></div>
    </div>

    <!-- Custom Confirmation Modal (for Outgoing) -->
    <div id="confirmation-modal" class="modal">
        <div class="modal-content">
            <div class="text-xl font-bold mb-4">¿Estás seguro?</div>
            <p class="text-gray-700 mb-6">Una vez que pulses en "Enviar Pedido", el pedido de traslado se guardará en el historial y se descontará del stock. ¿Deseas continuar?</p>
            <div class="flex justify-center space-x-4">
                <button onclick="hideModal('confirmation-modal')" class="px-6 py-2 text-sm font-semibold text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-all duration-200">
                    Cancelar
                </button>
                <button onclick="registerMovement()" class="px-6 py-2 text-sm font-semibold text-white bg-indigo-600 rounded-md hover:bg-indigo-700 transition-all duration-200">
                    Enviar Pedido
                </button>
            </div>
        </div>
    </div>

    <!-- Custom Confirmation Modal (for Incoming) -->
    <div id="incoming-modal" class="modal">
        <div class="modal-content">
            <div class="text-xl font-bold mb-4">¿Registrar Entrada?</div>
            <p class="text-gray-700 mb-6">El stock de pallets se incrementará. ¿Deseas continuar?</p>
            <div class="flex justify-center space-x-4">
                <button onclick="hideModal('incoming-modal')" class="px-6 py-2 text-sm font-semibold text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-all duration-200">
                    Cancelar
                </button>
                <button onclick="registerIncoming()" class="px-6 py-2 text-sm font-semibold text-white bg-green-600 rounded-md hover:bg-green-700 transition-all duration-300">
                    Registrar
                </button>
            </div>
        </div>
    </div>

    <!-- Initial Stock Modal -->
    <div id="initial-stock-modal" class="modal">
        <div class="modal-content text-left">
            <h3 class="text-2xl font-bold mb-4">Establecer Stock Inicial</h3>
            <p class="text-gray-600 mb-4">Introduce la cantidad de pallets que tienes para cada material.</p>
            <div id="initial-stock-form" class="space-y-4">
                <!-- Form fields will be dynamically generated here -->
            </div>
            <div class="flex justify-end space-x-4 mt-6">
                <button onclick="hideModal('initial-stock-modal')" class="px-6 py-2 text-sm font-semibold text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-all duration-200">
                    Cancelar
                </button>
                <button onclick="saveInitialStock()" class="px-6 py-2 text-sm font-semibold text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-all duration-200">
                    Guardar
                </button>
            </div>
        </div>
    </div>

    <script>
        let itemCounter = 1;

        // Lista de materiales y sus SKUs.
        const productsWithSku = {
            "PALE 1200X800 C.81 LOGIFRUIT": { sku: "LOGIFRUIT81" },
            "CAJA PLAST IFCO 400X300 A-162 RF.BLL4314": { sku: "BLACK4314" },
            "CAJA PLAST IFCO 400X300 A-119 RF.BLL4310": { sku: "BLACK4310" },
            "CAJA PLAST EUROPOOL 400X300 A150 RF.154": { sku: "154CAJAVERDE" },
            "TARR. CILIN. PIÑA - PURA PIÑA - T1296": { sku: "PURAPIÑA" },
            "TARR. CILIN. PIÑA - ALDI - T1296": { sku: "ALDI1" },
            "TARR. CILIN. PIÑA - DEL MONTE - T1296": { sku: "DELMONTE" },
            "TAPA TARRINA CILINDRO PINA": { sku: "TAPAPIÑA" },
            "TARRINA REDONDA D97,5 - H75 - T1398": { sku: "TARRINA97,5" },
            "SEPARADOR 6 UNIDADES 400X300 A-70": { sku: "SEPARADOR6" },
            "CAJA CARTON 320X230 A-125 VERDE LIDL": { sku: "MONTADA A-125" },
            "TARRINA REDONDA D119 - H73,5 - T1835": { sku: "TARRINA119" },
            "TARR. RED. D97,5-H100-T1398 ZANAH.PALITO": { sku: "TARRINA ZANAHORIA" },
            "TARRINA K 2187-1AF": { sku: "TARRINA 1AF" },
            "CAJA PLST LOGIFRUIT 400X300 A-160 RF.316": { sku: "LOGIFRUIT 316" },
            "HACENDADO1": { sku: "HACENDADO1" }
        };

        // Stock inicial proporcionado por el usuario
        const initialStockData = {
            "LOGIFRUIT81": 120,
            "BLACK4314": 80,
            "BLACK4310": 110,
            "154CAJAVERDE": 95,
            "PURAPIÑA": 200,
            "ALDI1": 150,
            "DELMONTE": 180,
            "TAPAPIÑA": 250,
            "TARRINA97,5": 300,
            "SEPARADOR6": 70,
            "MONTADA A-125": 50,
            "TARRINA119": 170,
            "TARRINA ZANAHORIA": 220,
            "TARRINA 1AF": 90,
            "LOGIFRUIT 316": 150,
            "HACENDADO1": 75
        };

        // Nueva función robusta para obtener la fecha local en formato YYYY-MM-DD
        function getLocalDateString(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        document.addEventListener('DOMContentLoaded', (event) => {
            document.getElementById('fechaPedido').value = getLocalDateString(new Date());
            document.getElementById('incomingDate').value = getLocalDateString(new Date());
            // Inicializa las fechas en el resumen diario con el mes actual
            const today = new Date();
            const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            document.getElementById('summary-start-date').value = getLocalDateString(firstDayOfMonth);
            document.getElementById('summary-end-date').value = getLocalDateString(lastDayOfMonth);
            initializeStockAndHistory();
            populateDatalist();
            showForm();
        });

        // Función para poblar la datalist con las opciones de productos
        function populateDatalist() {
            const datalist = document.getElementById('products');
            datalist.innerHTML = Object.keys(productsWithSku).map(desc => `<option value="${desc}">`).join('');
        }

        // Lógica corregida para inicializar el stock y el historial solo la primera vez
        function initializeStockAndHistory() {
            const movements = getMovements();
            const materialStock = getMaterialStock();
            const initialStock = getInitialInventoryStock();

            // Si no hay movimientos ni stock guardado, inicializa con los datos por defecto
            if (movements.length === 0 && Object.keys(materialStock).length === 0) {
                saveInitialInventoryStock(initialStockData);
                saveMaterialStock(initialStockData);
            }
        }

        function resetView() {
            document.getElementById('form-container').classList.add('hidden');
            document.getElementById('history-container').classList.add('hidden');
            document.getElementById('incomings-container').classList.add('hidden');
            document.getElementById('stock-container').classList.add('hidden');

            document.getElementById('form-tab').classList.remove('bg-indigo-100', 'text-indigo-700');
            document.getElementById('form-tab').classList.add('text-gray-500');
            document.getElementById('incomings-tab').classList.remove('bg-indigo-100', 'text-indigo-700');
            document.getElementById('incomings-tab').classList.add('text-gray-500');
            document.getElementById('stock-tab').classList.remove('bg-indigo-100', 'text-indigo-700');
            document.getElementById('stock-tab').classList.add('text-gray-500');
            document.getElementById('history-tab').classList.remove('bg-indigo-100', 'text-indigo-700');
            document.getElementById('history-tab').classList.add('text-gray-500');
        }

        function showForm() {
            resetView();
            document.getElementById('form-container').classList.remove('hidden');
            document.getElementById('form-tab').classList.add('bg-indigo-100', 'text-indigo-700');
            document.getElementById('form-tab').classList.remove('text-gray-500');
        }

        function showIncomings() {
            resetView();
            document.getElementById('incomings-container').classList.remove('hidden');
            document.getElementById('incomings-tab').classList.add('bg-indigo-100', 'text-indigo-700');
            document.getElementById('incomings-tab').classList.remove('text-gray-500');
        }

        function showStock() {
            resetView();
            document.getElementById('stock-container').classList.remove('hidden');
            document.getElementById('stock-tab').classList.add('bg-indigo-100', 'text-indigo-700');
            document.getElementById('stock-tab').classList.remove('text-gray-500');
            updateStockDisplay();
        }

        function showHistory() {
            resetView();
            document.getElementById('history-container').classList.remove('hidden');
            document.getElementById('history-tab').classList.add('bg-indigo-100', 'text-indigo-700');
            document.getElementById('history-tab').classList.remove('text-gray-500');
            document.getElementById('monthly-summary-container').classList.add('hidden');
            loadHistory();
        }

        function confirmAndRegisterMovement() {
            const fechaEntrega = document.getElementById('fechaEntrega').value;
            const itemEntries = document.querySelectorAll('.item-entry');
            const hasItems = Array.from(itemEntries).some(item => {
                const desc = item.querySelector(`input[id^="item-"]`).value;
                const cantidad = item.querySelector(`input[id^="cantidad-"]`).value;
                return desc && cantidad && parseInt(cantidad) > 0;
            });
            
            if (!fechaEntrega || !hasItems) {
                showMessage('Por favor, completa la fecha de entrega y añade al menos un artículo.', 'error');
                return;
            }
            document.getElementById('confirmation-modal').style.display = 'flex';
        }

        function confirmAndRegisterIncoming() {
            const incomingPallets = parseInt(document.getElementById('incomingPallets').value, 10);
            const incomingItem = document.getElementById('incomingItem').value;
            const incomingDate = document.getElementById('incomingDate').value;
            
            if (!incomingDate || isNaN(incomingPallets) || incomingPallets <= 0 || !incomingItem) {
                showMessage('Por favor, completa la fecha, cantidad y selecciona un artículo.', 'error');
                return;
            }
            document.getElementById('incoming-modal').style.display = 'flex';
        }

        function hideModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Actualiza el SKU basado en la descripción del artículo (funciona con el nuevo input)
        function updateSku(inputElement) {
            const selectedItem = inputElement.value;
            const itemEntry = inputElement.closest('.item-entry');
            const skuInput = itemEntry.querySelector(`input[id^="sku-"]`);
            
            if (productsWithSku[selectedItem]) {
                skuInput.value = productsWithSku[selectedItem].sku;
            } else {
                skuInput.value = '';
            }
        }

        // Actualiza el SKU para el formulario de entradas
        function updateIncomingSku() {
            const selectedItem = document.getElementById('incomingItem').value;
            const skuInput = document.getElementById('incomingSku');
            
            if (productsWithSku[selectedItem]) {
                skuInput.value = productsWithSku[selectedItem].sku;
            } else {
                skuInput.value = '';
            }
        }

        function addItem() {
            const container = document.getElementById('items-container');
            const newItemHtml = `
                <div class="item-entry grid md:grid-cols-4 grid-cols-1 gap-4 items-center p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <div>
                        <label for="item-${itemCounter}" class="block text-xs font-medium text-gray-500">Descripción del Artículo</label>
                        <input type="text" id="item-${itemCounter}" list="products" oninput="updateSku(this)" placeholder="Escribe para buscar..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border">
                    </div>
                    <div>
                        <label for="sku-${itemCounter}" class="block text-xs font-medium text-gray-500">SKU / Código</label>
                        <input type="text" id="sku-${itemCounter}" placeholder="Código" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border" readonly>
                    </div>
                    <div>
                        <label for="cantidad-${itemCounter}" class="block text-xs font-medium text-gray-500">Cantidad</label>
                        <input type="number" id="cantidad-${itemCounter}" value="1" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2.5 border">
                    </div>
                    <div class="flex justify-end">
                        <button onclick="removeItem(this)" class="px-4 py-2 text-sm font-medium text-white bg-red-500 rounded-md hover:bg-red-600 focus:ring-4 focus:ring-red-300 transition-all duration-200">
                            Eliminar
                        </button>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', newItemHtml);
            itemCounter++;
        }

        function removeItem(button) {
            const itemEntry = button.closest('.item-entry');
            if (document.querySelectorAll('.item-entry').length > 1) {
                itemEntry.remove();
            } else {
                showMessage('No puedes eliminar el último artículo.', 'error');
            }
        }

        function showMessage(message, type) {
            const messageBox = document.getElementById('message-box');
            messageBox.textContent = message;
            messageBox.classList.remove('hidden', 'bg-red-100', 'text-red-700', 'bg-green-100', 'text-green-700');
            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'text-green-700');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'text-red-700');
            }
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 5000);
        }

        // --- Funciones para manejar LocalStorage y Stock por Material ---
        
        function getMovements() {
            const movements = localStorage.getItem('inventoryMovements');
            return movements ? JSON.parse(movements) : [];
        }

        function saveMovements(movements) {
            localStorage.setItem('inventoryMovements', JSON.stringify(movements));
        }

        function loadHistory() {
            const movements = getMovements();
            const historyList = document.getElementById('history-list');
            historyList.innerHTML = '';

            if (movements.length === 0) {
                historyList.innerHTML = `<p class="text-center text-gray-500">Aún no hay movimientos. Crea un pedido para empezar.</p>`;
            } else {
                // Ordenar movimientos por fecha de pedido
                const sortedMovements = movements.sort((a, b) => {
                    const dateA = a.tipo === 'Salida' ? new Date(a.fechaPedido) : new Date(a.fechaPedido);
                    const dateB = b.tipo === 'Salida' ? new Date(b.fechaPedido) : new Date(b.fechaPedido);
                    return dateB - dateA;
                });
                sortedMovements.forEach(data => {
                    const movementTypeColor = data.tipo === 'Salida' ? 'text-red-600' : 'text-green-600';
                    const itemsHtml = data.items.map(item => `
                        <li>${item.cantidad} x ${item.desc} (SKU: ${item.sku})</li>
                    `).join('');
                    
                    const fechaVisual = data.tipo === 'Salida' ? data.fechaEntrega : data.fechaPedido;

                    const movementEntryHtml = `
                        <div class="p-4 border border-gray-200 rounded-lg bg-gray-50 shadow-sm">
                            <p class="text-sm text-gray-500"><strong>Fecha:</strong> ${fechaVisual}</p>
                            ${data.tipo === 'Salida' ? `<p class="text-sm text-gray-500"><strong>Fecha de Pedido:</strong> ${data.fechaPedido}</p>` : ''}
                            <p class="text-sm font-semibold mt-2">Movimiento: <span class="${movementTypeColor}">${data.tipo}</span></p>
                            <p class="text-sm font-semibold">Total de Pallets: ${data.pallets}</p>
                            ${data.items.length > 0 ? `<p class="text-gray-700 mt-2"><strong>Artículos:</strong></p><ul class="list-disc list-inside text-gray-600 text-sm pl-4">${itemsHtml}</ul>` : ''}
                            ${data.comentarios ? `<p class="text-gray-700 mt-2"><strong>Comentarios:</strong> ${data.comentarios}</p>` : ''}
                        </div>
                    `;
                    historyList.insertAdjacentHTML('beforeend', movementEntryHtml);
                });
            }
        }

        function getMaterialStock() {
            const stock = localStorage.getItem('materialStock');
            return stock ? JSON.parse(stock) : {};
        }
        
        function saveMaterialStock(stock) {
            localStorage.setItem('materialStock', JSON.stringify(stock));
        }

        function getInitialInventoryStock() {
            const stock = localStorage.getItem('initialInventoryStock');
            return stock ? JSON.parse(stock) : {};
        }

        function saveInitialInventoryStock(stock) {
            localStorage.setItem('initialInventoryStock', JSON.stringify(stock));
        }
        
        function updateStockDisplay() {
            const stock = getMaterialStock();
            const container = document.getElementById('stock-table-container');
            container.innerHTML = '';
            
            let stockHtml = `
                <table class="w-full text-left border-collapse table-auto">
                    <thead>
                        <tr class="text-gray-600">
                            <th class="py-2 px-4 bg-gray-200 rounded-tl-lg">Material</th>
                            <th class="py-2 px-4 bg-gray-200">SKU</th>
                            <th class="py-2 px-4 bg-gray-200 rounded-tr-lg text-right">Stock (Pallets)</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            let hasStock = false;
            for (const desc in productsWithSku) {
                const sku = productsWithSku[desc].sku;
                const pallets = stock[sku] || 0;
                if (pallets > 0) hasStock = true;
                stockHtml += `
                    <tr class="border-t border-gray-300">
                        <td class="py-2 px-4">${desc}</td>
                        <td class="py-2 px-4">${sku}</td>
                        <td class="py-2 px-4 text-right">${pallets}</td>
                    </tr>
                `;
            }
            stockHtml += `
                    </tbody>
                </table>
            `;
            container.innerHTML = stockHtml;
            
            if (!hasStock) {
                 container.innerHTML = `<p class="text-center text-gray-500 p-8">No hay stock registrado. Usa el botón "Establecer Stock Inicial" para empezar.</p>`;
            }
        }

        function showInitialStockModal() {
            const modal = document.getElementById('initial-stock-modal');
            const form = document.getElementById('initial-stock-form');
            form.innerHTML = '';
            
            const currentStock = getMaterialStock();

            for (const desc in productsWithSku) {
                const sku = productsWithSku[desc].sku;
                const currentPallets = currentStock[sku] || 0;
                const fieldHtml = `
                    <div>
                        <label for="initial-stock-${sku}" class="block text-sm font-medium text-gray-700">${desc} (SKU: ${sku})</label>
                        <input type="number" id="initial-stock-${sku}" value="${currentPallets}" min="0" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2.5 border">
                    </div>
                `;
                form.insertAdjacentHTML('beforeend', fieldHtml);
            }

            modal.style.display = 'flex';
        }

        function saveInitialStock() {
            const newStock = {};
            for (const desc in productsWithSku) {
                const sku = productsWithSku[desc].sku;
                const inputElement = document.getElementById(`initial-stock-${sku}`);
                if (inputElement) {
                    newStock[sku] = parseInt(inputElement.value, 10) || 0;
                }
            }
            saveInitialInventoryStock(newStock);
            saveMaterialStock(newStock);
            hideModal('initial-stock-modal');
            showMessage('Stock inicial guardado con éxito. Este será el punto de partida para el resumen diario.', 'success');
            updateStockDisplay();
        }

        function registerMovement() {
            hideModal('confirmation-modal');

            const fechaPedido = document.getElementById('fechaPedido').value;
            const fechaEntrega = document.getElementById('fechaEntrega').value;
            const comentarios = document.getElementById('comentarios').value;
            
            let totalPallets = 0;
            const items = [];
            const itemEntries = document.querySelectorAll('.item-entry');
            const currentStock = getMaterialStock();
            
            itemEntries.forEach((item) => {
                const desc = item.querySelector(`input[id^="item-"]`).value;
                const sku = item.querySelector(`input[id^="sku-"]`).value;
                const cantidad = parseInt(item.querySelector(`input[id^="cantidad-"]`).value, 10);
                
                if (desc && sku && cantidad > 0) {
                    items.push({ desc, sku, cantidad });
                    totalPallets += cantidad;
                    // Deduce la cantidad del stock actual
                    currentStock[sku] = (currentStock[sku] || 0) - cantidad;
                }
            });

            if (items.length === 0) {
                showMessage('Debes añadir al menos un artículo.', 'error');
                return;
            }
            
            const movementData = {
                fechaPedido,
                fechaEntrega,
                pallets: totalPallets,
                comentarios,
                items,
                tipo: 'Salida',
            };

            const movements = getMovements();
            movements.push(movementData);
            saveMovements(movements);

            // Guarda el stock actualizado
            saveMaterialStock(currentStock);
            updateStockDisplay();

            // --- Lógica para enviar el correo ---
            const subject = encodeURIComponent(`Nuevo Pedido de Material - ${fechaPedido}`);
            let body = `Hola,\n\nSe ha registrado un nuevo pedido de material.\n\n`;
            body += `Fecha del Pedido: ${fechaPedido}\n`;
            body += `Fecha de Entrega Deseada: ${fechaEntrega}\n\n`;
            body += `Artículos del Pedido:\n`;
            items.forEach(item => {
                body += `- ${item.cantidad} x ${item.desc} (SKU: ${item.sku})\n`;
            });
            body += `\nTotal de Pallets en el Pedido: ${totalPallets}\n`;
            if (comentarios) {
                body += `Comentarios: ${comentarios}\n`;
            }
            body += `\nGracias.\n`;
            
            const mailtoLink = `mailto:?subject=${subject}&body=${encodeURIComponent(body)}`;
            window.open(mailtoLink);
            // --- Fin de la lógica del correo ---

            showMessage('El pedido de traslado ha sido registrado y el stock ha sido actualizado.', 'success');
        }

        function registerIncoming() {
            hideModal('incoming-modal');
            
            const incomingPallets = parseInt(document.getElementById('incomingPallets').value, 10);
            const incomingItem = document.getElementById('incomingItem').value;
            const incomingSku = document.getElementById('incomingSku').value;
            const incomingDate = document.getElementById('incomingDate').value;

            if (!incomingDate || isNaN(incomingPallets) || incomingPallets <= 0 || !incomingItem) {
                showMessage('Por favor, completa la fecha, cantidad y selecciona un artículo.', 'error');
                return;
            }

            const movementData = {
                fechaPedido: incomingDate,
                fechaEntrega: '',
                pallets: incomingPallets,
                items: [{ desc: incomingItem, sku: incomingSku, cantidad: incomingPallets }],
                tipo: 'Entrada',
            };

            const movements = getMovements();
            movements.push(movementData);
            saveMovements(movements);

            // Actualiza el stock
            const currentStock = getMaterialStock();
            currentStock[incomingSku] = (currentStock[incomingSku] || 0) + incomingPallets;
            saveMaterialStock(currentStock);
            updateStockDisplay();

            showMessage(`Se ha registrado una entrada de ${incomingPallets} pallets y el stock ha sido actualizado.`, 'success');
        }

        function clearHistory() {
            localStorage.removeItem('inventoryMovements');
            localStorage.removeItem('materialStock');
            localStorage.removeItem('initialInventoryStock');
            loadHistory();
            updateStockDisplay();
            document.getElementById('monthly-summary-container').classList.add('hidden');
            showMessage('El historial y el stock han sido borrados.', 'success');
        }

        function showDailySummary() {
            const movements = getMovements();
            const startDateStr = document.getElementById('summary-start-date').value;
            const endDateStr = document.getElementById('summary-end-date').value;
            
            if (!startDateStr || !endDateStr) {
                showMessage('Por favor, selecciona una fecha de inicio y una fecha de fin.', 'error');
                return;
            }

            const startDate = new Date(startDateStr + 'T00:00:00');
            const endDate = new Date(endDateStr + 'T23:59:59');

            if (startDate > endDate) {
                showMessage('La fecha de fin no puede ser anterior a la fecha de inicio.', 'error');
                return;
            }
            
            const summaryContainer = document.getElementById('monthly-summary-container');
            summaryContainer.innerHTML = '';
            summaryContainer.classList.remove('hidden');

            // 1. Calcular el stock inicial al comienzo del rango de fechas
            const initialStockBase = getInitialInventoryStock();
            let stockAtStartOfRange = calculateStockUpToDate(startDate, initialStockBase, movements);
            let totalRunningStock = calculateTotalPallets(stockAtStartOfRange);

            let summaryHtml = `
                <div class="bg-gray-200 rounded-lg p-4 text-left shadow-inner mb-4">
                    <h4 class="text-xl font-bold mb-2">Resumen Diario del ${startDate.toLocaleDateString('es-ES')} al ${endDate.toLocaleDateString('es-ES')}</h4>
                    <div class="overflow-x-auto">
                        <table class="w-full summary-table">
                            <thead>
                                <tr class="bg-gray-300">
                                    <th>Fecha</th>
                                    <th>Stock Inicial</th>
                                    <th>Entradas</th>
                                    <th>Salidas</th>
                                    <th>Stock Final</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

            // 2. Bucle principal para cada día del rango
            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                const currentDateStr = getLocalDateString(d);
                const initialStockForDay = totalRunningStock;

                let dailyIncomings = 0;
                let dailyOutgoings = 0;

                movements.forEach(m => {
                    const movementDate = m.tipo === 'Entrada' ? m.fechaPedido : m.fechaEntrega;
                    if (movementDate === currentDateStr) {
                        if (m.tipo === 'Entrada') {
                            dailyIncomings += m.pallets;
                        } else if (m.tipo === 'Salida') {
                            dailyOutgoings += m.pallets;
                        }
                    }
                });

                // Actualiza el stock total para el final del día
                totalRunningStock = initialStockForDay + dailyIncomings - dailyOutgoings;

                summaryHtml += `
                    <tr>
                        <td>${d.toLocaleDateString('es-ES')}</td>
                        <td>${initialStockForDay}</td>
                        <td><span class="text-green-600">+${dailyIncomings}</span></td>
                        <td><span class="text-red-600">-${dailyOutgoings}</span></td>
                        <td>${totalRunningStock}</td>
                    </tr>
                `;
            }

            summaryHtml += `
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
            summaryContainer.innerHTML = summaryHtml;
        }

        // Nueva función auxiliar para calcular el stock hasta una fecha determinada
        function calculateStockUpToDate(targetDate, initialStockBase, movements) {
            let runningStock = { ...initialStockBase };
            const sortedMovements = movements.sort((a, b) => {
                const dateA = a.tipo === 'Salida' ? new Date(a.fechaEntrega) : new Date(a.fechaPedido);
                const dateB = b.tipo === 'Salida' ? new Date(b.fechaEntrega) : new Date(b.fechaPedido);
                return dateA - dateB;
            });

            sortedMovements.forEach(m => {
                let movementDate;
                if (m.tipo === 'Salida') {
                    movementDate = new Date(m.fechaEntrega);
                } else {
                    movementDate = new Date(m.fechaPedido);
                }
                
                // Comparar solo la fecha, ignorando la hora
                if (movementDate.setHours(0,0,0,0) < targetDate.setHours(0,0,0,0)) {
                    m.items.forEach(item => {
                        if (m.tipo === 'Entrada') {
                             runningStock[item.sku] = (runningStock[item.sku] || 0) + item.cantidad;
                        } else if (m.tipo === 'Salida') {
                            runningStock[item.sku] = (runningStock[item.sku] || 0) - item.cantidad;
                        }
                    });
                }
            });
            return runningStock;
        }

        // Calcula el total de pallets de un objeto de stock
        function calculateTotalPallets(stock) {
            return Object.values(stock).reduce((total, pallets) => total + pallets, 0);
        }
    </script>
</body>
</html>
